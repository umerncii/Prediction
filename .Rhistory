install.packages('caret')
install.packages('caret')
llibrary(caret)
library(caret)
library(dplyr)
install.packages('parallel')
install.packages('doParallel')
install.packages('gbm')
library(parallel)
library(doParallel)
library(gbm)
install.packages('earth')
library(earth)
install.packages('fastDummies')
library(fastDummies)
install.packages('mlbench')
library(mlbench)
install.packages('MLmetrics')
library(MLmetrics)
library(readxl)
library(readr)
library(xlsx)
library(tidyverse)
library(modeest)
library(dplyr)
library(magrittr)
library(ggplot2)
library(cluster)
library(quantmod)
library(tseries)
library(timeSeries)
library(forecast)
library(xts)
library(C50)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
#Here I'm setting my working directory
setwd("D:/4th Year/Final Year Project/Mid-Implementation/NewYork Stock Exchange")
#Here I'm importing my prices datasets in RStudio
prices <- read.csv("D:/4th Year/Final Year Project/Mid-Implementation/NewYork Stock Exchange/prices.csv")
#Here I am importing my apple stock financial dataset, which is taken from yahoo.finaance.com
Apple <- read.csv("D:/4th Year/Final Year Project/Mid-Implementation/NewYork Stock Exchange/Apple.csv")
View(prices)#With this line of codes I can see my prices dataset in new tab
print(prices)#with this line of code I can see my prices dataset in console tab
print(Apple)#we can see dataset in console tab
#Removing some rows from prices dataset
prices[-c(851264, 851263), ]
prices <- prices[-c(851264, 851263), ]
#With this line of codes we can see values in our prices dataset column
prices[,1]#we can see what is at our index 1
prices[,2]#we can see what is at our index 2
prices[,3]#we can see what is at our index 3
prices[,4]#we can see what is at our index 4
prices[,5]#we can see what is at our index 5
prices[,6]#we can see what is at our index 6
prices[,7]#we can see what is at our index 7
#With this codes we can see values in our Apple dataset
Apple[,1]#we can see what is at our index 1
Apple[,2]#we can see what is at our index 2
Apple[,3]#we can see what is at our index 3
Apple[,4]#we can see what is at our index 4
Apple[,5]#we can see what is at our index 5
Apple[,6]#we can see what is at our index 6
Apple[,7]#we can see what is at our index 7
#Getting our columns names pf stock prices and Apple datasets
colnames(prices)
colnames(Apple)
#Reordering column of prices dataset by their position
prices<-prices[, c(2, 1, 3, 4, 5, 6, 7)]                # All columns in my dataset are re-ordered as I want them to be
#Reordering column of Apple dataset by their positions
Apple<-Apple[, c(1, 2, 3, 4, 5, 7, 6)]
#Renaming our prices dataset columns names
names(prices)[names(prices)== "symbol"] <- "Symbol"
names(prices)[names(prices)== "date"] <- "Date"
names(prices)[names(prices)== "open"] <- "Open"
names(prices)[names(prices)== "close"] <- "Close"
names(prices)[names(prices)== "low"] <- "Low"
names(prices)[names(prices)== "high"] <- "High"
names(prices)[names(prices)== "volume"] <- "Volume"
#Renaming some apple dataset column names
names(Apple)[names(Apple)=="Date"] <- "Dates (2010-2016)"
#Adding new columns
prices[,3]*0.84#Converting Dollars to Euros
prices$euros <- prices[,3]*0.84#Adding column in dataset
names(prices)[names(prices)== "euros"] <- "Opening(In Euros)"#Changing the names of column
prices[,3]*0.75#Converting Dollars to Britan pound
prices$pounds <- prices[,3]*0.75#Adding a new column in dataset
names(prices)[names(prices)== "pounds"] <- "Opening(In pounds)"# changing the name of column
#Checking empty values in Stock prices and Apple datasets
sapply(prices, function(x) sum(is.na(x)))# With this line of code I can check is there any empty rows in my prices dataset
sapply(Apple, function(x) sum(is.na(x)))#With th
View(Apple)#We can see our apple dataset in new tab
num_cores <- 4
cluster <- makePSOCKcluster(num_cores)
registerDoParallel(cluster)
set.seed(42)
train_index <- createDataPartition(
Apple$`Close`,
p = 0.75,
list = FALSE
)
close_train <- Apple[train_index,]
pred_train <- Apple[train_index,]
pred_test <- Apple[-train_index,]
pred_test <- Apple[-train_index,]
pred_train_one_hot <- LifeE_one_hot[train_index,]
pred_train_one_hot <- apple_one_hot[train_index,]
pred_train_one_hot <- Apple_one_hot[train_index,]
pred_train_one_hot <- Apple_one_hot[train_index,]
pred_test_one_hot <- apple_one_hot[-train_index,]
pred_train_dummies <- apple_dummies[train_index,]
pred_test_dummies <- apple_dummies[-train_index,]
pred_train_one_hot <- Apple[train_index,]
pred_test_one_hot <- Apple[-train_index,]
pred_train_dummies <- Apple[train_index,]
pred_test_dummies <- Apple[-train_index,]
repeats = 5
folds = 10
fit_control <- trainControl(
method = 'repeatedcv',
number = folds,
repeats = repeats,
search = 'random'
)
ptm <- proc.time()
rf_fit <- train(
`Apple` ~ .,
data = pred_train,
method = 'rf',
metric = 'MAE',
tuneLength = 40,
allowParallel = TRUE,
verbose = FALSE,
trControl = fit_control
)
num_cores <- 6
cluster <- makePSOCKcluster(num_cores)
registerDoParallel(cluster)
Apple2_one_hot <- dummy_cols(Apple)
Apple2_dummies <- dummy_cols(Apple, remove_first_dummy = TRUE)
#Create train and test partitions
set.seed(42)
train_index <- createDataPartition(
Apple$Close,
p = 0.75,
list = FALSE
)
apple_train <- Apple[train_index,]
apple_test <- Apple[-train_index,]
apple_train_one_hot <- Apple_one_hot[train_index,]
housing_train_one_hot <- BostonHousing2_one_hot[train_index,]
apple_test_one_hot <- Apple[-train_index,]
housing_train_dummies <- Apple_dummies[train_index,]
apple_train_dummies <- Apple[train_index,]
apple_test_dummies <- Apple[-train_index,]
apple_train_one_hot <- Apple[train_index,]
repeats = 5
folds = 10
fit_control <- trainControl(
method = 'repeatedcv',
number = folds,
repeats = repeats,
search = 'random'
)
ptm <- proc.time()
model_tree_fit <- train(
cmedv ~ .,
data = Apple,
method = 'cubist',
metric = 'MAE',
tuneLength = 40,
allowParallel = TRUE,
trControl = fit_control
)
model_tree_time <- proc.time() - ptm
model_tree_fit <- train(
Apple ~ .,
data = Apple,
method = 'cubist',
metric = 'MAE',
tuneLength = 40,
allowParallel = TRUE,
trControl = fit_control
)
model_tree_fit <- train(
Apple close ~ .,
data = Apple,
method = 'cubist',
metric = 'MAE',
tuneLength = 40,
allowParallel = TRUE,
trControl = fit_control
)
#Create train and test partitions
set.seed(42)
train_index <- createDataPartition(
Apple$cmedv,
p = 0.75,
list = FALSE
)
apple_train <- Apple[train_index,]
apple_test <- Apple[-train_index,]
apple_train_one_hot <- Apple[train_index,]
apple_test_one_hot <- Apple[-train_index,]
apple_train_dummies <- Apple[train_index,]
apple_test_dummies <- Apple[-train_index,]
#Create train and test partitions
set.seed(42)
train_index <- createDataPartition(
Apple$cmedv,
p = 0.75,
list = FALSE
)
#Setting up parallel processing
num_cores <- 6
cluster <- makePSOCKcluster(num_cores)
registerDoParallel(cluster)
#Encoding
Apple2_one_hot <- dummy_cols(Apple)
Apple2_dummies <- dummy_cols(Apple, remove_first_dummy = TRUE)
#Create train and test partitions
set.seed(42)
train_index <- createDataPartition(
Apple$cmedv,
p = 0.75,
list = FALSE
)
#Setting up parallel processing
num_cores <- 6
cluster <- makePSOCKcluster(num_cores)
registerDoParallel(cluster)
#Encoding
Apple2_one_hot <- dummy_cols(Apple)
Apple2_dummies <- dummy_cols(Apple, remove_first_dummy = TRUE)
#Create train and test partitions
set.seed(42)
train_index <- createDataPartition(
Apple$Close,
p = 0.75,
list = FALSE
)
apple_train <- Apple[train_index,]
apple_test <- Apple[-train_index,]
apple_train_one_hot <- Apple[train_index,]
apple_test_one_hot <- Apple[-train_index,]
apple_train_dummies <- Apple[train_index,]
apple_test_dummies <- Apple[-train_index,]
repeats = 5
folds = 10
fit_control <- trainControl(
method = 'repeatedcv',
number = folds,
repeats = repeats,
search = 'random'
)
ptm <- proc.time()
model_tree_fit <- train(
Close ~ .,
data = Apple,
method = 'cubist',
metric = 'MAE',
tuneLength = 40,
allowParallel = TRUE,
trControl = fit_control
)
model_tree_time <- proc.time() - ptm
